# Yhmd <- readHMDweb(CNTRY = pop,
#                    item = "Deaths_1x1",
#                    fixup = TRUE)
# ## in both two previous steps
# ## if arguments "username" and "password" are not
# ## provided you will be prompted about
# ## selecting ages and years
# E0 <- subset(Ehmd, Year%in%years1 & Age%in%ages, sex)
# ## place in a mXn1 matrix
# E1 <- matrix(E0[,1], m, n1)
# ## selecting ages and years
# Y0 <- subset(Yhmd, Year%in%years1 & Age%in%ages, sex)
# ## place in a mXn1 matrix
# Y1 <- matrix(Y0[,1], m, n1)
# ## observed log-rates
# MX1 <- Y1/E1
# ETA1 <- log(MX1)
## USING HMDdata for the current version
## select population
pop <- "Japan" ## alternative names(HMDdata)
## select sex
sex <- "F" ## alternative "F"
## extract deaths and exposures from HMDdata
Y1 <- matrix(selectHMDdata(pop, "Deaths", sex, ages, years1), m, n1)
E1 <- matrix(selectHMDdata(pop, "Exposures", sex, ages, years1), m, n1)
MX1 <- Y1/E1
ETA1 <- log(MX1)
## plotting
matplot(ages, ETA1, col=colnT[1:n1], t="l", lty=3,
xlab="ages", ylab="log-mortality")
whi <- floor(seq(1,n1,length=4))
for(i in whi) lines(ages, ETA1[,i], col=coln[i], lwd=4)
legend("topleft", inset=0.1, legend=years1[whi], col=coln[whi], lwd=4)
## observed e0
e01 <- apply(MX1, 2, function(mx) sum(exp(-cumsum(mx)))+0.5)
## plotting
plot(years1, e01, pch=16, xlab="years", ylab="e0")
## observed e-dagger
ed1 <-  apply(MX1, 2, function(mx)  - sum(exp(-cumsum(mx))*(-cumsum(mx))))
## plotting
plot(years1, ed1, pch=16, xlab="years", ylab="e-dagger")
## gini coefficients
gi1 <- apply(MX1, 2, function(mx) 1 - sum(exp(-cumsum(mx))^2)/(sum(exp(-cumsum(mx))))-.0006)
## plotting
plot(years1, gi1, pch=16, xlab="years", ylab="Gini coefficient")
# ## computing e0 using matrix algebra
# MX1vec <- c(MX1)
# In <- diag(n1)
# Im <- diag(m)
# C <- lower.tri(Im, diag = TRUE)
# C[C==1] <- -1
# CC <- kronecker(In, C)
# ones.m <- matrix(1,1,m)
# Iones <- kronecker(In, ones.m)
# e01a <- Iones %*% exp(CC%*%MX1vec) + 0.5
## matrices/vectors arbitrary values
Y <- matrix(10, m, n)
Y[1:m,1:n1] <- Y1
E <- matrix(10, m, n)
E[1:m,1:n1] <- E1
MX <- Y/E
MX[,(n1+1):n] <- NA
ETA <- log(MX)
## set weights equal to zero for future years
WEI <- matrix(0, m, n)
WEI[,1:n1] <- 1
## set equal to zero when we have no exposures
WEI[E1==0] <- 0
# ## PLAIN P-splines
#
# ## B-splines
# ## over ages
# Ba <- MortSmooth_bbase(x=a, xl=min(a), xr=max(a), ndx=floor(m/5), deg=3)
# nba <- ncol(Ba)
# ## over all years (observed+forecast)
# Bt <- diag(n)
# nbt <- ncol(Bt)
# ## only for the observed years
# Bt1 <- diag(n1)
# nbt1 <- ncol(Bt1)
# ## only for the forecast years
# BtF <- diag(nF)
# nbtF <- ncol(BtF)
#
# ## overall basis
# B <- kronecker(Bt, Ba)
# nb <- ncol(B)
# B1 <- kronecker(Bt1, Ba)
# nb1 <- ncol(B1)
# BF <- kronecker(BtF, Ba)
# nbF <- ncol(BF)
#
# ## over ages
# Ba1 <- kronecker(matrix(1, ncol = nba, nrow = 1), Ba)
# Ba2 <- kronecker(Ba, matrix(1, ncol = nba, nrow = 1))
# RTBa <- Ba1 * Ba2
# ## over all years (observed+forecast)
# BBt1 <- kronecker(matrix(1, ncol = nbt, nrow = 1), Bt)
# BBt2 <- kronecker(Bt, matrix(1, ncol = nbt, nrow = 1))
# RTBt <- BBt1 * BBt2
# ## only for the observed years
# BBt11 <- kronecker(matrix(1, ncol = nbt1, nrow = 1), Bt1)
# BBt21 <- kronecker(Bt1, matrix(1, ncol = nbt1, nrow = 1))
# RTBt1 <- BBt11 * BBt21
# ## only for the forecast years
# BBt1F <- kronecker(matrix(1, ncol = nbtF, nrow = 1), BtF)
# BBt2F <- kronecker(BtF, matrix(1, ncol = nbtF, nrow = 1))
# RTBtF <- BBt1F * BBt2F
#
#
# ## penalty stuff
# Da <- diff(diag(nba), diff=2)
# tDDa <- t(Da)%*%Da
# Dt <- diff(diag(nbt), diff=2)
# tDDt <- t(Dt)%*%Dt
# Pa <- kronecker(diag(nbt), tDDa)
# Pt <- kronecker(tDDt, diag(nba))
# ## smoothing parameters
# lambdas <- c(10^0, 10^7)
# lambda.a <- lambdas[1]
# lambda.t <- lambdas[2]
# P <- lambda.a * Pa + lambda.t * Pt
#
# ## simple smoothing
# ETA <- log((Y+1)/(E+1))
# for(it in 1:20){
#   MU <- E*exp(ETA)
#   W <- c(WEI*MU)
#   z <- ETA + (1/MU) * (Y - MU)
#   z[which(WEI == 0)] <- 0
#   WW <- WEI * W
#   tBWB <- MortSmooth_BWB(RTBa, RTBt, nba, nbt, WW)
#   tBWBpP <- tBWB + P
#   tBWz <- MortSmooth_BcoefB(t(Ba), t(Bt), (WW * z))
#   betas <- solve(tBWBpP, c(tBWz))
#   BETAS <- matrix(betas, nrow = nba)
#   old.ETA <- ETA
#   ETA <- MortSmooth_BcoefB(Ba, Bt, BETAS)
#   dif.ETA <- max(abs(old.ETA - ETA))
#   cat(it, dif.ETA, "\n")
#   if(dif.ETA < 1e-4) break
# }
# BETAS.S <- BETAS
# ETA.S <- ETA
# MU.S <- exp(ETA)
#
#
# ## plotting
# rany <- range(ETA1, ETA.S, finite=TRUE)
# matplot(ages, ETA1, col=colnT, t="l", lty=3, ylim=rany,
#         xlab="ages", ylab="log-mortality")
# whi <- floor(seq(1,n,length=6))
# for(i in whi) lines(ages, ETA.S[,i], col=coln[i], lwd=4)
# legend("topleft", inset=0.1, legend=years[whi], col=coln[whi], lwd=4)
#
# par(mfrow=c(2,3))
# whi <- floor(seq(1,m,length=6))
# ranx <- range(years)
# for(i in whi){
#   rany <- range(ETA1[i,], ETA.S[i,], finite=TRUE)
#   plot(years, ETA.S[i,], t="l", lwd=4, col=colmT[i], main=paste(ages[i]),
#        ylim=rany, xlim=ranx,xlab="ages", ylab="log-mortality")
#   points(years1, ETA1[i,], col=colm[i], pch=16)
#   abline(v=years[n1]+0.5)
# }
# par(mfrow=c(1,1))
#
# ## compute estimated+forecast e0
# e0.S <- apply(MU.S, 2, function(mx) sum(exp(-cumsum(mx)))+0.5)
#
# ## plotting
# ranx <- range(years)
# rany <- range(e01, e0.S)
# plot(years, e0.S, t="l", col=2, lwd=4,
#      xlab="years", ylab="e0", xlim=ranx, ylim=rany)
# points(years1, e01, pch=16)
# abline(v=years[n1]+0.5)
#
# ## compute estimated+forecast e-dagger
# ed.S <-  apply(MU.S, 2, function(mx)  - sum(exp(-cumsum(mx))*(-cumsum(mx))))
#
# ## plotting
# ranx <- range(years)
# rany <- range(ed1, ed.S)
# plot(years, ed.S, t="l", col=2, lwd=4,
#      xlab="years", ylab="e-dagger", xlim=ranx, ylim=rany)
# points(years1, ed1, pch=16)
# abline(v=years[n1]+0.5)
## P-SPLINES + infant mortality coefficients
## over ages w/o age 0
a0 <- a[-1]
m0 <- m-1
Ba0 <- MortSmooth_bbase(x=a0, xl=min(a0), xr=max(a0), ndx=floor(m0/5), deg=3)
nba0 <- ncol(Ba0)
## adding infant-specific basis
Ba <- cbind(0, Ba0)
Ba <- rbind(c(1, rep(0,nba0)), Ba)
nba <- ncol(Ba)
matplot(a, Ba, t="l", lty=1, col=rainbow(nba))
## over all years (observed+forecast)
Bt <- diag(n)
nbt <- ncol(Bt)
## only for the observed years
Bt1 <- diag(n1)
nbt1 <- ncol(Bt1)
## only for the forecast years
BtF <- diag(nF)
nbtF <- ncol(BtF)
## overall basis
B <- kronecker(Bt, Ba)
nb <- ncol(B)
B1 <- kronecker(Bt1, Ba)
nb1 <- ncol(B1)
BF <- kronecker(BtF, Ba)
nbF <- ncol(BF)
## over ages
Ba1 <- kronecker(matrix(1, ncol = nba, nrow = 1), Ba)
Ba2 <- kronecker(Ba, matrix(1, ncol = nba, nrow = 1))
RTBa <- Ba1 * Ba2
## over all years (observed+forecast)
BBt1 <- kronecker(matrix(1, ncol = nbt, nrow = 1), Bt)
BBt2 <- kronecker(Bt, matrix(1, ncol = nbt, nrow = 1))
RTBt <- BBt1 * BBt2
## only for the observed years
BBt11 <- kronecker(matrix(1, ncol = nbt1, nrow = 1), Bt1)
BBt21 <- kronecker(Bt1, matrix(1, ncol = nbt1, nrow = 1))
RTBt1 <- BBt11 * BBt21
## only for the forecast years
BBt1F <- kronecker(matrix(1, ncol = nbtF, nrow = 1), BtF)
BBt2F <- kronecker(BtF, matrix(1, ncol = nbtF, nrow = 1))
RTBtF <- BBt1F * BBt2F
## penalty stuff
Da <- diff(diag(nba), diff=2)
Da[1,1] <- 0
tDDa <- t(Da)%*%Da
Dt <- diff(diag(nbt), diff=2)
tDDt <- t(Dt)%*%Dt
Pa <- kronecker(diag(nbt), tDDa)
Pt <- kronecker(tDDt, diag(nba))
## smoothing parameters
lambdas <- c(10^0, 10^7)
lambda.a <- lambdas[1]
lambda.t <- lambdas[2]
P <- lambda.a * Pa + lambda.t * Pt
## simple smoothing
ETA <- log((Y+1)/(E+1))
for(it in 1:20){
MU <- E*exp(ETA)
W <- c(WEI*MU)
z <- ETA + (1/MU) * (Y - MU)
z[which(WEI == 0)] <- 0
WW <- WEI * W
tBWB <- MortSmooth_BWB(RTBa, RTBt, nba, nbt, WW)
tBWBpP <- tBWB + P
tBWz <- MortSmooth_BcoefB(t(Ba), t(Bt), (WW * z))
betas <- solve(tBWBpP, c(tBWz))
BETAS <- matrix(betas, nrow = nba)
old.ETA <- ETA
ETA <- MortSmooth_BcoefB(Ba, Bt, BETAS)
dif.ETA <- max(abs(old.ETA - ETA))
cat(it, dif.ETA, "\n")
if(dif.ETA < 1e-4) break
}
BETAS.SI <- BETAS
ETA.SI <- ETA
MU.SI <- exp(ETA)
## plotting
rany <- range(ETA1, ETA.SI, finite=TRUE)
matplot(ages, ETA1, col=colnT, t="l", lty=3, ylim=rany,
xlab="ages", ylab="log-mortality")
whi <- floor(seq(1,n,length=6))
for(i in whi) lines(ages, ETA.SI[,i], col=coln[i], lwd=4)
legend("topleft", inset=0.1, legend=years[whi], col=coln[whi], lwd=4)
par(mfrow=c(2,5))
whi <- floor(seq(1,m,length=10))
ranx <- range(years)
for(i in whi){
rany <- range(ETA1[i,], ETA.SI[i,], finite=TRUE)
plot(years, ETA.SI[i,], t="l", lwd=4, col=colmT[i], main=paste(ages[i]),
ylim=rany, xlim=ranx,xlab="ages", ylab="log-mortality")
points(years1, ETA1[i,], col=colm[i], pch=16)
abline(v=years[n1]+0.5)
}
par(mfrow=c(1,1))
## compute estimated+forecast e0
e0.SI <- apply(MU.SI, 2, function(mx) sum(exp(-cumsum(mx)))+0.5)
## compute estimated+forecast e-dagger
ed.SI <-  apply(MU.SI, 2, function(mx)  - sum(exp(-cumsum(mx))*(-cumsum(mx))))
## useful objects
ones.m <- matrix(1,m,1)
Im <- diag(m)
C <- lower.tri(Im, diag = TRUE)
C[C==1] <- -1
## derivative of e0 with respect to age for each year (observed+forecast)
der.e0.SI <- matrix(0, m, n)
for(i in 1:n){
Ba.betas <- ETA.SI[,i]
exp.Ba.betas <- exp(Ba.betas)
Q <- C %*% exp.Ba.betas
exp.Q <- exp(Q)
d.exp.Q <- diag(c(exp.Q))
d.exp.Ba.betas <- diag(c(exp.Ba.betas))
deriv.coef <- t(ones.m) %*% d.exp.Q %*% C %*% d.exp.Ba.betas %*% Ba
der.e0.SI[,i] <- Ba%*%c(deriv.coef)
}
## derivative of e-dagger with respect to age for each year (observed+forecast)
der.ed.SI <- matrix(0, m, n)
for(i in 1:n){
Ba.betas <- ETA.SI[,i]
exp.Ba.betas <- exp(Ba.betas)
Q <- C %*% exp.Ba.betas
exp.Q <- exp(Q)
p1 <- t(Ba) %*% ( t(C) %*% (Q * exp.Q) * exp.Ba.betas)
p2 <- t(Ba) %*% ( (t(C)%*%exp.Q) * exp.Ba.betas)
deriv.coef <- -(p1 + p2)
der.ed.SI[,i] <- Ba%*%c(deriv.coef)
}
## plotting
par(mfrow=c(2,2))
ranx <- range(years)
rany <- range(e01, e0.SI)
plot(years, e0.SI, t="l", col=2, lwd=4,
xlab="years", ylab="e0", xlim=ranx, ylim=rany)
points(years1, e01, pch=16)
abline(v=years[n1]+0.5)
ranx <- range(years)
rany <- range(ed1, ed.SI)
plot(years, ed.SI, t="l", col=2, lwd=4,
xlab="years", ylab="e-dagger", xlim=ranx, ylim=rany)
points(years1, ed1, pch=16)
abline(v=years[n1]+0.5)
matplot(ages, der.e0.SI, t="l", col=coln, lty=c(rep(1,n1), rep(3,nF)))
abline(h=0, col=8, lwd=2, lty=2)
matplot(ages, der.ed.SI, t="l", col=coln, lty=c(rep(1,n1), rep(3,nF)))
abline(h=0, col=8, lwd=2, lty=2)
par(mfrow=c(1,1))
par(mfrow=c(4,2))
whi <- floor(seq(1,m,length=4))
ranx <- range(years)
for(i in whi){
rany <- range(ETA1[i,], ETA.SI[i,], finite=TRUE)
plot(years, ETA.SI[i,], t="l", lwd=4, col=colmT[i], main=paste(ages[i]),
ylim=rany, xlim=ranx,xlab="ages", ylab="log-mortality")
points(years1, ETA1[i,], col=colm[i], pch=16)
rany <- range(der.e0.SI[i,])
plot(years, der.e0.SI[i,], t="l", lwd=4, col=colm[i], main=paste(ages[i]),
ylim=rany, xlim=ranx,xlab="ages", ylab="d e0 / d mu")
abline(v=years[n1]+0.5)
}
par(mfrow=c(1,1))
##
quantile(der.e0.SI)
brek <- seq(-2.25, 0, 0.25)#c(-2.1, -1.5, -1.25, -1, -0.75, -0.5, -0.25, -0.1, 0)
colo <- rev(brewer.pal(9, "Blues"))
image.plot(years, ages, t(der.e0.SI), breaks=brek, col=colo)
abline(v=years[n1]+0.5)
quantile(der.ed.SI)
brek <- seq(-1, 1.75, 0.25)
colo <- c(rev(brewer.pal(4, "Blues")), brewer.pal(7, "Reds"))
image.plot(years, ages, t(der.ed.SI), breaks=brek, col=colo)
abline(v=years[n1]+0.5)
## forecasting e0
e0.ts <- ts(e01[26:n1], start = t1[26:n1])
ds <- 0
df.test.e0 <- ur.df(e0.ts,lags=2,'trend')
if (df.test.e0@teststat[1] > df.test.e0@cval[1,][1]) ds <- 1 ## if TRUE -> d = 1
e0.mod <- auto.arima(e0.ts,d=ds,max.p=3,max.q=3,trace=TRUE)
pred.e0 <- forecast(e0.mod, h=nF,level=80)
## target e0
e0.tar <- as.vector(pred.e0$mean)
## forecasting e-dagger
ed.ts <- ts(ed1, start = t1[1])
# ## option 1
# ds <- 0
# df.test.ed <- ur.df(ed.ts,lags=2,'trend')
# if (df.test.ed@teststat[1] > df.test.ed@cval[1,][1]) ds <- 1 ## if TRUE -> d = 1
# ed.mod <- auto.arima(ed.ts,d=ds,max.p=3,max.q=3,trace=TRUE)
# pred.ed <- forecast(ed.mod, h=nF,level=80)
## option 2
ed.mod <- auto.arima(ed.ts, d=2, max.p=2, max.q=2)
pred.ed <- forecast(ed.mod, h=nF,level=95)
## target ed
ed.tar <- as.vector(pred.ed$mean)
par(mfrow=c(1,2))
plot(pred.e0)
lines(t, e0.SI, col=2, lwd=2, lty=2)
plot(pred.ed)
lines(t, ed.SI, col=2, lwd=2, lty=2)
par(mfrow=c(1,1))
## useful objects
ONE <- matrix(0, nb1, nF)
BETAS <- BETAS.SI
BETASF <- BETAS[,(nbt1+1):nbt]
## constraints on e0 over "future" years
Constr.e0 <-  function(BETASF){
ETA.F <- MortSmooth_BcoefB(Ba, BtF, BETASF)
MU.F <- exp(ETA.F)
e0.F <- apply(MU.F, 2, function(mx) sum(exp(-cumsum(mx)))+0.5)
delta.e0 <- e0.F - e0.tar
deriv.e0 <- matrix(0, nbF, nF)
for(i in 1:nF){
Ba.betas <- ETA.F[,i]
exp.Ba.betas <- exp(Ba.betas)
Q <- C %*% exp.Ba.betas
exp.Q <- exp(Q)
d.exp.Q <- diag(c(exp.Q))
d.exp.Ba.betas <- diag(c(exp.Ba.betas))
wr <- 1:nba + (i-1)*nba
deriv.e0[wr,i] <- t(ones.m) %*% d.exp.Q %*% C %*% d.exp.Ba.betas %*% Ba
}
out.e0 <- list(delta.e0=delta.e0,
deriv.e0=deriv.e0)
return(out.e0)
}
Constr.ed <-  function(BETASF){
ETA.F <- MortSmooth_BcoefB(Ba, BtF, BETASF)
MU.F <- exp(ETA.F)
ed.F <- apply(MU.F, 2, function(mx) - sum(exp(-cumsum(mx))*(-cumsum(mx))))
delta.ed <- ed.F - ed.tar
deriv.ed <- matrix(0, nbF, nF)
for(i in 1:nF){
Ba.betas <- ETA.F[,i]
exp.Ba.betas <- exp(Ba.betas)
Q <- C %*% exp.Ba.betas
exp.Q <- exp(Q)
p1 <- t(Ba) %*% ( t(C) %*% (Q * exp.Q) * exp.Ba.betas)
p2 <- t(Ba) %*% ( (t(C)%*%exp.Q) * exp.Ba.betas)
wr <- 1:nba + (i-1)*nba
deriv.ed[wr,i] <- -(p1 + p2)
}
out.ed <- list(delta.ed=delta.ed,
deriv.ed=deriv.ed)
return(out.ed)
}
Pr <- 10^-4*diag(nba*n+nF+nF)
ONE <- matrix(0, nb1, nF)
BETAS <- BETAS.SI
PLOT <- TRUE
for(it in 1:10){
betas <- c(BETAS)
ETA <- MortSmooth_BcoefB(Ba, Bt, BETAS)
MU <- E*exp(ETA)
W <- c(WEI*MU)
z <- ETA + (1/MU) * (Y - MU)
z[which(WEI == 0)] <- 0
WW <- WEI * W
tBWB <- MortSmooth_BWB(RTBa, RTBt, nba, nbt, WW)
tBWBpP <- tBWB + P
tBWz <- MortSmooth_BcoefB(t(Ba), t(Bt), (WW * z))
fx1 <- tBWBpP%*%betas - c(tBWz)
fx2 <- tBWBpP
BETASF <- BETAS[,(nbt1+1):nbt]
constr.e0 <- Constr.e0(BETASF)
hx <- constr.e0$delta.e0
hx1 <- constr.e0$deriv.e0
constr.ed <- Constr.ed(BETASF)
gx <- constr.ed$delta.ed
gx1 <- constr.ed$deriv.ed
Am <- cbind( rbind(ONE, hx1),
rbind(ONE, gx1))
bv <- -c(hx, gx)
LHS <- rbind(cbind(fx2, Am),
cbind(t(Am), 0*diag(ncol(Am)))) + Pr
RHS <- c(-fx1, bv)
d <- solve(LHS, RHS)[1:nb]
D <- matrix(d, nba, nbt)
BETAS <- BETAS + D
cat(it, max(abs(d)), "\n")
if(max(abs(d))<1e-4) break
if(PLOT){
par(mfrow=c(1,2))
e0.C <- apply(exp(ETA), 2, function(mx) sum(exp(-cumsum(mx)))+0.5)
ranx <- range(t)
rany <- range(e0.tar, e0.SI)
plot(t1, e01, xlim=ranx, ylim=rany)
points(tF, e0.tar, pch=16, t="b", lwd=2)
lines(t, e0.SI, col=2, lwd=2, lty=2)
lines(t, e0.C, col=4, lwd=3)
abline(v=t[n1]+0.5)
ed.C <- apply(exp(ETA), 2, function(mx) - sum(exp(-cumsum(mx))*(-cumsum(mx))))
ranx <- range(t)
rany <- range(ed.tar, ed.SI)
plot(t1, ed1, xlim=ranx, ylim=rany)
points(tF, ed.tar, pch=16, t="b", lwd=2)
lines(t, ed.SI, col=2, lwd=2, lty=2)
lines(t, ed.C, col=4, lwd=3)
abline(v=t[n1]+0.5)
par(mfrow=c(1,1))
}
}
BETAS.C <- BETAS
ETA.C <- ETA
MU.C <- exp(ETA)
## plotting
rany <- range(ETA1, ETA.C, finite=TRUE)
matplot(ages, ETA1, col=colnT, t="l", lty=3, ylim=rany,
xlab="ages", ylab="log-mortality")
whi <- floor(seq(1,n,length=6))
for(i in whi) lines(ages, ETA.C[,i], col=coln[i], lwd=4)
legend("topleft", inset=0.1, legend=years[whi], col=coln[whi], lwd=4)
par(mfrow=c(2,5))
whi <- floor(seq(1,m,length=10))
ranx <- range(years)
for(i in whi){
rany <- range(ETA1[i,], ETA.C[i,], finite=TRUE)
plot(years, ETA.C[i,], t="l", lwd=4, col=colmT[i], main=paste(ages[i]),
ylim=rany, xlim=ranx,xlab="ages", ylab="log-mortality")
points(years1, ETA1[i,], col=colm[i], pch=16)
lines(years, ETA.SI[i, ], lwd=3, lty=2)
abline(v=years[n1]+0.5)
}
par(mfrow=c(1,1))
